- name: Provision AWS Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    region: us-east-1
    az_1: us-east-1a
    az_2: us-east-1b
    sg_name: ecom-sg
    instance_types: t2.medium
    ami_id: ami-020cba7c55df1f615

  tasks:
    - name: Create a VPC
      amazon.aws.ec2_vpc_net:
        name: ecom-vpc
        cidr_block: 192.168.0.0/16
        region: "{{ region }}"
        dns_support: yes
        dns_hostnames: yes
        state: present
      register: vpc

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
      register: igw

    - name: Create Public Subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 192.168.1.0/24
        az: "{{ az_1 }}"
        region: "{{ region }}"
        state: present
        resource_tags:
          Name: public-subnet
      register: public_subnet

    - name: Create Private Subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 192.168.2.0/24
        az: "{{ az_2 }}"
        resource_tags:
          Name: private-subnet
        region: "{{ region }}"
        state: present
      register: private_subnet

    - name: Create Public Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        subnets:
          - "{{ public_subnet.subnet.id }}"
        tags:
          Name: public-route-table
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        state: present
      register: public_route_table

    - name: Create Security Group
      amazon.aws.ec2_security_group:
        name: "{{ sg_name }}"
        description: "Allow SSH traffic"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 6443
            to_port: 6443
            cidr_ip: 192.168.1.0/24
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        tags:
          Name: "{{ sg_name }}"
        state: present
      register: security_group

    - name: Launch EC2 Instance in Public Subnet
      amazon.aws.ec2_instance:
        name: "Master"
        key_name: "host-key"  # Ensure this key exists in your AWS region
        subnet_id: "{{ public_subnet.subnet.id }}"
        instance_type: "{{ instance_types }}"
        security_group: "{{ security_group.group_id }}"
        network:
          assign_public_ip: true
        image_id: "{{ ami_id }}"
        region: "{{ region }}"
        state: present
        tags:
          Environment: Testing
      register: ec2
    - name: Launch EC2 Instance in Public Subnet as Worker nodes
      amazon.aws.ec2_instance:
        name: "Worker Node"
        key_name: "host-key"  # Ensure this key exists in your AWS region
        subnet_id: "{{ public_subnet.subnet.id }}"
        instance_type: "{{ instance_types }}"
        security_group: "{{ security_group.group_id }}"
        network:
          assign_public_ip: true
        image_id: "{{ ami_id }}"
        region: "{{ region }}"
        exact_count: 2
        state: present
        tags:
          Environment: Testing
      register: ec2worker

    - name: Gather information using tag name
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": ["Master", "Worker Node"]
      register: ec2_info

    - name: Show instance Name, ID, and Public IP
      debug:
        msg: >
          {% for instance in ec2_info.instances %}
          Name: {{ instance.tags.Name | default('No Name') }},
          ID: {{ instance.instance_id }},
          Public IP: {{ instance.public_ip_address | default('N/A') }}
          {% endfor %}
